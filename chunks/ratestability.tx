\section{Rate Stability and Utilization}
\label{sec:rate-stability}

In the analysis of any queueing process the first step should be to
check the relations between the arrival, service and departure
rates. In particular, the load, defined as the ratio of the arrival
rate and service rate is of importance. In this section we define
these concepts and establish the most relevation relations between
these concepts.

We first formalize the concepts of \emph{arrival rate} and
\emph{departure rate} and relate them to the \emph{counting
  processes} $\{A(t)\}$ and $\{D(t)\}$. The concept of rate is crucial
because it captures our intuition that when, on the long run, jobs
arrive faster than they can leave, the system must `explode'. Thus,
the first performance measures we need to estimate when analyzing a
queueing system are the arrival and departure rate, and then we need
to check that the arrival rate is not larger than the departure rate.
As a reminder, we keep the discussion in these notes mostly at an
intuitive level, and refer to
\cite{el-taha98:_sampl_path_analy_queuein_system} for proofs and
further background discussion.


The \recall{arrival rate} is the long-run average number of jobs that
arrive per unit time, i.e., 
\begin{equation}
  \label{eq:3}
  \lambda = \lim_{t\to\infty} \frac{A(t)}t.
\end{equation}
We remark in passing that this limit does not necessarily exist if
$A(t)$ is some pathological function. If, however, the inter-arrival
times $\{X_k\}$ are the basic data, and $\{X_k\}$ are i.i.d.  and
distributed as a generic random variable $X$ with finite mean $\E{X}$,
we can construct $\{A_k\}$ and $A(t)$ as described in
Section~\ref{sec:constr-gg1-queu}; the strong law of large numbers
then guarantees that the above limit exists.

Observe that at time $t=A_n$, precisely $n$ arrivals occurred. Thus,
by applying the definition of $A(t)$ at the epochs $A_n$, we see that
$A(A_n) = n$. Thus,
\begin{equation*}
  \frac{1}n\sum_{k=1}^n X_k = \frac{A_n}n = \frac{A_n}{A(A_n)}. 
\end{equation*}
But since $A_n\to\infty$ if $n\to\infty$, it follows from
Eq.~(\ref{eq:3}) that the average inter-arrival time between two
consecutive jobs is such that
\begin{equation}\label{eq:54}
  \E X = \lim_{n\to\infty}  \frac{1}n\sum_{k=1}^n X_k = \lim_{n\to \infty} \frac{A_n}{A(A_n)} = \lim_{t\to\infty} \frac t{A(t)} = \frac 1 \lambda,
\end{equation}
where we take $t=A_n$ in the limit for $t\to\infty$.  In words the
above states that the arrival rate $\lambda$ is the inverse of the
expected inter-arrival time.


The development of the departure times $\{D_k\}$ is entirely analogous
to that of the arrival times; we leave it to the reader to provide the
details. As a result we can define the \recall{departure rate} as
\begin{equation}\label{eq:28}
  \lim_{t\to\infty} \frac{D(t)}t = \gamma
\end{equation}

Assume now that there is a single server. Let $S_k$ be the required
service time of the $k$th job to be served, and define
\begin{equation*}
U_n = \sum_{k=1}^n S_k
\end{equation*}
as the total service time required by the first $n$ jobs. With this,
the number of jobs that the server can \emph{potentially} serve during
$[0,t]$ becomes
\begin{equation*}
  U(t) = \sup\{n: U_n \leq t\}.
\end{equation*}
Then, define the \recall{service } or \emph{processing rate} as
\begin{equation*}
  \mu = \lim_{t\to\infty} \frac{U(t)}t.
\end{equation*}
In the same way as we derived that $\E X= 1/\lambda$, we obtain for
the expected (or average) amount of service required by an individual
job
\begin{equation*}
  \E S = \lim_{n\to\infty} \frac 1 n \sum_{k=1}^n S_k = \lim_{n\to\infty} \frac{U_n}{n} = \lim_{n\to\infty} \frac{U_n}{S(U_n)} = \lim_{t\to\infty} \frac t{U(t)} = \frac 1 \mu.
\end{equation*}

Now observe that, if the system is empty at time $0$, it must be that
at any time the number of departures must be smaller than the number
of arrivals, i.e., $D(t) \leq A(t)$ for all $t$. Therefore,
\begin{equation}\label{eq:26}
\gamma :=   \lim_t \frac{D(t)}t \leq \lim_t \frac{A(t)}t = \lambda.
\end{equation}
We call a system \recall{(rate) stable} if
\begin{equation*}
  \lambda = \gamma,
\end{equation*}
in other words, the system is stable if, on the long run, jobs leave
the system just as fast as they arrive. Observe that if
$\lambda > \gamma$, then the queue length process $L(t) \to \infty$ as
$t\to \infty$.

It is also evident that jobs cannot depart faster than they can be
served, hence, $D(t) \leq U(t)$ for all~$t$. Combining this with the
fact that $\gamma \leq \lambda$, we get
\begin{equation*}
  \gamma \leq \min\{\lambda, \mu\}.
\end{equation*}
When $\mu \geq \lambda$ the above inequality reduces to
$\gamma = \lambda$ for rate-stable systems. (It is interesting to
prove this.) As it turns out, when $\mu = \lambda$ and $\V S_n > 0$ or
$\V X_n >0$ then $\lim_t L(t)/t$ does not necessarily exist. For this
reason we henceforth require that $\mu > \lambda$.

The concept of \recall{load} or \emph{utilization}, denoted by the
symbol $\rho$, is a fundamental notion. Conceptually, the load is the
rate at which jobs arrive multiplies by the average amount of work per
job.  More specifically, since $A(t)$ is the number of jobs that have
arrived up to time $t$, the total amount of work arrived up to time
$t$ is given by $\sum_{k=1}^{A(t)} S_k$. We therefore define the load
as
\begin{equation*}
  \rho = \lim_{t\to\infty} \frac 1 t\sum_{k=1}^{A(t)} S_k.
\end{equation*}
We can relate this to the arrival rate $\lambda$ and the expected
service time $ \E S$ by observing that, as $A(t)\to \infty$ as
$t\to\infty$,
\begin{equation*}
  \lim_{t\to\infty} \frac 1 t\sum_{k=1}^{A(t)} S_k = 
  \lim_{t\to\infty} \frac{A(t)}t \frac{1}{A(t)} \sum_{k=1}^{A(t)} S_k = 
  \lim_{t\to\infty} \frac{A(t)}t \cdot \lim_{t\to\infty}\frac{1}{A(t)} \sum_{k=1}^{A(t)} S_k = \lambda \E S.
\end{equation*}
Thus, 
\begin{equation*}
  \rho = \lambda \E S.
\end{equation*}
Moreover, as $\lambda^{-1} = \E X$ and $\mu^{-1} = \E S$, we get the
following set of relations
\begin{equation*}
  \rho = \lambda \E S = \frac{\lambda}{\mu} = \frac{\E S}{\E X}.
\end{equation*}

Finally, recall that for a system to be rate-stable, it is necessary
that $\mu> \lambda$, implying in turn that $\rho < 1$. The relation
$\rho=\E S/ \E X < 1$ then tells us that the average time it takes to
serve a job  must be less than the average time between two consecutive
arrivals, i.e., $\E S < \E X$.


\begin{question}
  Define the departure time $D_{k}$ of the $k$th job in terms of
  $\{D(t)\}$. (Use the analogy with Eq.~\eqref{eq:27}.)
\begin{solution}
  Let $D_{k} = \inf\{t; D(t) \geq k\}$. Then the inter-departure times
  are $\{D_{k}-D_{k-1}\}$. Conversely, given a set of inter-departure
  times, we can construct $\{D_k\}$ and from this $\{D(t)\}$.
\end{solution}
\end{question}

\begin{question} 
  For stability of the queueing process it is essential that the
  random variables
  \begin{equation*}
    U_k = S_{k-1}-X_k    
  \end{equation*}
have negative expectation, i.e.,
  $\E{U_k} = \E{S_{k-1}-X_k} < 0$.
 What is the conceptual meaning of this inequality?
  \begin{solution}
 That the average time customers spend in service is smaller
      than the average time between the arrival of two subsequent
      jobs. 
  \end{solution}
\end{question}

\begin{question} 
Let 
 \begin{equation*}
    U_k = S_{k-1}-X_k    
  \end{equation*}
have negative expectation, i.e.,
  $\E{U_k} = \E{S_{k-1}-X_k} < 0$.
 Show that $\E U_k <0$ implies that $\lambda<\mu$. 
  \begin{solution}
  $0> \E{U_k} = \E {S_{k-1}-X_k} =  \E{ S_{k-1}}- \E {X_k} = \E S - \E X$, where we use the fact that the $\{S_k\}$ and $\{X_k\}$ are i.i.d. sequences. Hence, $\E S - \E X = (\E S/\E X - 1)\E X = (\lambda/\mu - 1)\E X = (\lambda/\mu-1)\E X$. 
  \end{solution}
\end{question}


\begin{question}\label{ex:5}
  Define $U_k = S_{k-1}-X_k$. With this we can write Eq.~(\ref{eq:56})
  as $W_{Q,k} = \max\{W_{Q,k-1} + U_k, 0\}$. Suppose that
  $X_k\in\{1,2,4\}$ with equal probability and $S_k\in\{1,2,3\}$, also
  with equal probabilities. Show also that $\E U_k <0$. What is the
  distribution of $U_k$ and $W_{Q,1}$ if $W_{Q,0}=5$?
\begin{solution}
  $\P{U_k = -3} = \P{U_k=-2}=\P{U_k=2} = 1/9$ and
  $\P{U_k = -1} = \P{U_k=0}=\P{U_k=2} = 2/9$. 

    Since $W_{Q,1} = \max\{W_{Q,0} + U_1,0\}$,
    $\P{W_{Q,1}=2}=\P{W_{Q,1}=3}=\P{W_{Q,1}=7} = 1/9$ and
    $\P{W_{Q,1}=4}=\P{W_{Q,1}=5}=\P{W_{Q,1}=6} = 2/9$.
\end{solution}
\end{question}


\begin{question}
  If $S\sim U[0,7]$ and $X\sim U[0,10]$, where $U[I]$ stands for the
  uniform distribution concentrated on the interval $I$, compute
  $\P{S-X\leq x}$.
  \begin{solution}
    This is trivial, of course, but I didn't find it easy\ldots In
    fact, I found it a major headache, hence it is good to try yourself
    before looking at the answer.

    Let us write $f(x)$ for the density of $\P{S-X\leq x}$, i.e.,
    $\P{S-X\leq x} = \int_{-\infty}^x f(y) \d y$. (A formal point, why
    does $\P{S-X \leq x }$ actually have a density? You can skip this
    detail if you like, but it is interesting to think about.) 

With conditioning, 
\begin{equation*}
  f(x) 
= \frac1{10}\int_{0}^{10} \P{S-X = x|X=u} \d u 
= \frac1{10}\int_{0}^{10} \P{S-u=  x }\d u 
= \frac1{10}\int_{0}^{10} \P{S= x +u} \d u.
\end{equation*}
(Observe that we just use the formulas we are used to from conditioning
on sets with positive probability. Recall, $\P{A|B} = \P{AB}/\P{B}$
only when $\P{B}>0$, and here $\P{X=x} = 0$ for all $x$, since $x$
consists of a single point and $X$ is uniformly distributed.) This
works in this case, but you should be careful when using it.)

Next, interpret $\P{S= y}$ as the density of $\P{S\leq y}$. Then, 
\begin{equation*}
  \P{S= y} =
  \begin{cases}
    0, &\text{ for } y \not \in [0,7], \\
    \frac17, &\text{ for } y \in [0,7].
  \end{cases}
\end{equation*}
Therefore, while using that in the above integral that $x$ is fixed, 
\begin{equation*}
  \P{S= x+u} = \frac 17 1\{-x \leq u \leq 7-x\},
\end{equation*}
from which
\begin{equation*}
  \begin{split}
  f(x)  
&= \frac1{70}\int_{0}^{10} 1\{-x \leq u \leq 7-x\} \d u \\
&= \frac1{70}\int_{-\infty}^{\infty} 1\{0\leq u \leq 10\} 1\{-x \leq u \leq 7-x\} \d u \\
&= \frac1{70}\int_{-\infty}^{\infty} 1\{\max\{0, -x\} \leq u \leq \min\{10, 7-x\} \d u.\\
  \end{split}
\end{equation*}
First we make some simple observations. If $x>7$ then
$\min\{10, 7-x\} <0$. This is smaller then $\max\{0, -x\}$. Thus,
$f(x) = 0$ for $x\geq 7$. Likewise, when $x\leq -10$, $f(x) =
0$. Also, when $x\in[-3,0]$ the $\max$ and $\min$ overlap. Thus, all in all,
\begin{equation*}
  f(x) = 
  \begin{cases}
    0, &\text{ if } x\leq -10, \\
 \frac {x+10}{70} &\text{ if } x \in [-10, -3], \\
\frac 1{10} &\text{ if } x \in [-3, 0], \\
 \frac {7-x}{70} &\text{ if } x \in [0, 7], \\
    0, &\text{ if } x>7, 
  \end{cases}
\end{equation*}

To check my solution, I went to Wolframalpha. This is what what I typed: 



\lstinputlisting{/home/nicky/Dropbox/nicky/vakken/qsim/queueing_book/chunks/ratestability_1.tex}


so, once you know \LaTeX\/ you can use wolframalpha.  Wolframalpha turned it to 



\lstinputlisting{/home/nicky/Dropbox/nicky/vakken/qsim/queueing_book/chunks/ratestability_2.tex}


For your convenience, I also include the following code from Wolframalpa



\lstinputlisting{/home/nicky/Dropbox/nicky/vakken/qsim/queueing_book/chunks/ratestability_3.tex}


Wolframalpha is a great site. Please check it out if you haven't done
so up to now.
 \end{solution}
\end{question}


\begin{question}
  Show that $\E{S}/\E{X}$ is the fraction of time the server is busy.
  \begin{solution}
 Let $T_1>A_1$ be the first time after the arrival of job 1
    that arrives at an empty system. (Observe that job 1 also arrives
    at an empty system.)  Suppose, for ease writing, that this job is
    the $n+1$th job, so that up to time $T_1-$ the number of arrivals
    is $n$. Since the first job arrived at time $A_1=X_1$, the first
    $n$ jobs arrived during $[X_1, T_1)$. The total amount of service
    that arrived during this period is $\sum_{i=1}^n S_i$.  Thus the
    fraction of time that the server has been busy during $[X_1, T_1)$
    is
        \begin{equation*}
\frac{\sum_{i=1}^n S_i}{T_1-X_1} 
=          \frac{\sum_{i=1}^n S_i}{\sum_{i=1}^{n+1}X_i -X_1} 
=          \frac{\sum_{i=1}^n S_i}{\sum_{i=2}^{n+1}X_i} 
        \end{equation*}
        Now use the assumption that the $\{X_i\}$ and $\{S_i\}$ are
        sequences of i.i.d. random variables distributed as the
        generic random variables $X$ and $S$, respectively. Then by
        taking expectations the above becomes
        \begin{equation*}
\frac{\E{\sum_{i=1}^n S_i}}{\E{\sum_{i=2}^{n+1}X_i}} 
= \frac{n \E S }{n \E X} =
 \frac{ \E S }{ \E X}.
        \end{equation*}

        These busy cycles occur over and over again. Thus, the
        long-run average fraction of time the server is busy must also
        be $\E S/E X$. (For the die-hards, there is a subtle point
        here: the arrival epochs of the $G/G/1$ queue are not real
        renewal moments, hence the epochs at which the busy times
        start also do not form a sequence of renewal times. But then
        it is not true, in general, that the busy times $\{B_i\}$ have
        the same distribution, neither do the idles times
        $\{I_n\}$. Showing that in the limit all is ok gap requires a
        substantial amount of mathematics. The above claim is still
        true however.)
  \end{solution}
\end{question}

\begin{question}
 Show that $\E{X - S}/\E{X}$ is the fraction of time
  the server is idle.
  \begin{solution}
    Since the fraction of idle time is $1$ minus the fraction of busy
    time, it follows that $1-\E S/ \E X = (\E X - \E S)/\E X$ is the
    idle time fraction.
  \end{solution}
\end{question}

\begin{question}\label{ex:11}
  If $\E B$ is the expected busy time and $\E I$ is the expected idle
  time, show that 
\begin{equation*}
  \E B = \frac{\rho }{1-\rho} \E I. 
\end{equation*}
 is the fraction of time the  server is busy.
\begin{solution}
  Consider a busy cycle, that is, a cycle that starts with the first
  job that sees an empty system at upon arrival up to the time another
  job sees an empty system upon arrival. In such one cycle, the server
  is busy for an expected duration $\E B$. The total expected length
  of the cycle is $\E B + \E I$, since after the last job of the cycle
  left, the expected time until the next job is $\E I$.

  Since $\rho$ is utilization of the server,
  \begin{equation*}
\rho = \frac{\E B}{\E B + \E I}.
  \end{equation*}
  With a bit of algebra the result follows.
\end{solution}
\end{question}

\begin{question}
  Consider a queueing system with $c$ identical servers (identical in
  the sense that each server has the same production rate $\mu$). What would be a reasonable stability criterion for this system? 
  \begin{solution}
    The criterion is $\rho < c$. To see this, we can take two
    different points of view.  Imagine that the $c$ servers are
    replaced by one server that works $c$ times as fast. The service
    capacity of both systems is the same, i.e., $c\mu$, where $\mu$ is
    the rate of one server. For the system with the fast server
    $\lambda/c\mu<1$, from which follows that $\lambda/\mu < c$.
    Another way to see it is to assume that the stream of jobs is
    split into $c$ smaller streams, each with arrival rate
    $\lambda/c$.  Again, applying the condition that
    $(\lambda/c )/\mu<1$ per server leads to the same conditions. 

    Later we define the load $\rho$ for the utilization of a
    multi-server queue as $\lambda/c\mu$.
  \end{solution}
\end{question}

\begin{question}
  Consider a paint factory which contains a paint mixing machine that
  serves two classes of jobs, A and B. The processing times of jobs of
  types A and B are constant and require $t_A$ and $t_B$ hours. The
  job arrival rate is $\lambda_A$ for type A and $\lambda_B$ for type
  $B$ jobs. It takes a setup time of $S_s$ hours to clean the mixing
  station when changing from paint type A to type B, and there is no
  time required to change from type B to A.

  To keep the system (rate) stable, it is necessary to produce the
  jobs in batches, for otherwise the server, i.e., the mixing machine,
  spends a too large fraction of time on setups, so that
  $\mu < \lambda$. Thus, it is necessary to identify minimal batch
  sizes to ensure that $\mu > \lambda$.  Motivate that the linear
  program below can be used to determine the minimal batch sizes.

\begin{equation*}
  \text{minimize }  T
\end{equation*}
such that
\begin{align*}
 T&=  k_A t_A + S + k_B t_B, \\
 \lambda_A T &< k_A,  \\
 \lambda_B T &< k_B.
\end{align*}

\hint{ Here are some questions to help you interpret this formulation.

\begin{enumerate}
\item   What are the decision variables for this problem? In other words, what are the `things' we can control/change?
\item What are the interpretations of $k_A t_A$, and $S+k_B t_B$?
\item What is the meaning of the first constraint?  Realize that $T$
  represents one production cycle. After the completion of one such
  cycle, we start another cycle. Hence, the start of every cycle can
  be seen as a restart of the entire system.
\item   What is the meaning of the other two constraints?
\item Why do we minimize the cycle time $T$?
\item Solve for $k_A$ and $k_B$ in terms of $S$,  $\lambda_A, \lambda_B$ and $t_A, t_B$. 
\item Generalize this to $m$ job classes and such that the cleaning
  time between jobs of class $i$ and $j$ is given by $S_{ij}$. (Thus,
  the setup times are sequence dependent.) 
\end{enumerate}
}

  \begin{solution}
    Realize that the machine works in cycles. A cycle starts with
    processing $k_A$ jobs of type A, then does a setup, and processes
    $k_B$ jobs of type B, and then a new cycle starts again.  The time
    it takes to complete one such cycle is $T=k_A t_A + S + k_B t_B$.
    The number of jobs of type A processed during one such cycle is,
    of course, $k_A$. Observe next that the average number of jobs
    that arrive during one cycle is $\lambda_A T$. We of course want
    that $\lambda_A T< k_A$, i.e., less jobs of type A arrive on
    average per cycle than what we can process.
  \end{solution}
\end{question}


\begin{question}
This exercise is meant  to give the reader some idea about what needs to be done to
    put everything on solid ground. 
    \begin{enumerate}
    \item In
    Eq. (\ref{eq:54}) we replaced the limit with respect to $n$ by a
    limit with respect to $t$.  But why is this actually allowed?  Use
    the notation $A_{A(t)}$ to show that all is ok.
  \item 
  Show that the function $t\to A(t)$ as defined by Eqs.~(\ref{eq:2})
  is right-continuous. 
    \end{enumerate}
 \begin{solution}
 Observing that $A_{A(t)}$ is the arrival time of the last job
    before time $t$ and that $A_{A(t)+1}$ is the arrival time of the
    first job after time $t$: 
  \begin{equation*}
    A_{A(t)}  \leq t  < A_{A(t)+1} \Leftrightarrow 
    \frac{A_{A(t)}} {A(t)}  \leq \frac{t}{A(t)}  <\frac{A_{A(t)+1}}{A(t)} = \frac{A_{A(t)+1}}{A(t)+1}\frac{A(t)+1}{A(t)}
  \end{equation*}
  Now $A(t)$ is a counting process such that $A(t)\to\infty$ as
  $t\to\infty$. Therefore, $\lim_t A_{A(t)}/A(t) = \lim_n
  A_n/n$.
  Moreover, it is evident that
  $\lim_t A_{A(t)+1}/(A(t)+1) = \lim_t A_{A(t)}/A(t)$, and that
  $(A(t)+1)/A(t)\to 1$ as $t\to\infty$. Thus it follows from the above
  inequalities that $\lim_n A_n/n = \lim_t t/A(t)$.
     

  Hopefully this problem, and its solution, clarifies that even such
  small details require attention. If we want to make some progress
  with respect to developing some queueing theory, we have to skip
  most of the proofs and mathematical problems; we simply don't have
  enough time in this course  to be concerned with all theorems
  and proofs.


  For the right-continuity of $A(t)$, define $f(t) = 1\{A_1 \leq
  t\}$.
  Observe first that $f(t)$ is increasing, and $f(t)\in\{0,1\}$. Thus,
  if $f(t)=1$ then $f(u)=1$ for all $u\geq t$, and if $f(t)=0$ then
  $f(u) = 0$ for all $u\leq t$.

    You may skip the rest of the prove below, but the above is
    essential to memorize; make a plot of $f(t)$, in particular the
    behavior around $A_1$ is important.

    We need to prove, for right-continuity, that $f(u)\to f(t) $ as
    $u\downarrow t$. When $f(t)=1$, $f(u)=1$ for any $u>1$, by the
    definition of $f(x)$. When $f(t)=0$ we have to do a bit more
    work. Formally, we have to prove that, for fixed $t$ and for all
    $\epsilon > 0$, there is a $\delta>0$ such that
    $u\in(t, t+\delta) \Rightarrow |f(u) -f(t)| < \epsilon$. (Note the
    differences with the regular definition of continuity.) Since, by
    assumption, $t$ is such that $f(t)=0$, and $f\in\{0,1\}$ we need
    to show that $f(u)=0$ for $u\in(t, t+\delta)$. Now, clearly, if
    $f(t)=0$ only if $t < A_1$.  But, then for any $u\in(t, A_1)$, we
    have that $f(u) = 0$. Thus, taking $\delta = A_1 - t$ suffices.

    The next step is to observe that $A(t)$ is a sum of
    right-continuous functions whose steps do not overlap since by
    assumption $0<A_1 < A_2 < \cdots$. As $A$ is (almost surely)
    finite sum of bounded, increasing and right-continuous functions,
    it is also right-continuous.

    If you like, you can try to prove this last step too. 


    % For finite sums it is simple. Suppose that $f$ and $g$ are
    % right-continuous, then
    % \begin{equation*}
    %   |f(u) + g(u) - f(t) - g(t)| \leq |f(u)-f(t)|+|g(u)-g(t)|.
    % \end{equation*}
    % Since both terms at the right hand side can be made arbitrarily
    % small, the left hand side can also be made as small as we
    % like. With this we can see that the function
    % $F_N(t) = \sum_{n=1}^N f_n(x)$ is right-continuous if all $f_n$
    % are right-continuous, and also that $F_{N+1} = F_N + f_{N+1}$ is
    % right-continuous. As this applies for all $N$, it follows from
    % induction that $\lim_N F_N$ is right-continous, provided this
    % limit exists. When $f_n$ are all increasing, which is the case for
    % our situation by taking $f_n(t) = 1\{A_n \leq t\}$, then this
    % limit certainly exists.
 \end{solution}
\end{question}


\begin{question}
  Check with simulation that when $\lambda > \mu$ the queue length
  grows roughly linearly with slope $\lambda - \mu$.  Thus, if
  $\rho>1$, `we are in trouble'.
  \begin{solution}
    See my website. 
  \end{solution}
\end{question}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: "book"
%%% End:
